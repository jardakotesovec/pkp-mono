diff -uwr adodb5/adodb-datadict.inc.php adodb/adodb-datadict.inc.php
--- adodb5/adodb-datadict.inc.php	2012-09-03 03:18:49.000000000 -0300
+++ adodb/adodb-datadict.inc.php	2012-11-07 18:27:06.000000000 -0400
@@ -180,6 +180,7 @@
 	var $invalidResizeTypes4 = array('CLOB','BLOB','TEXT','DATE','TIME'); // for changetablesql
 	var $blobSize = 100; 	/// any varchar/char field this size or greater is treated as a blob
 							/// in other words, we use a text area for editting.
+	var $charSet; // Added 2004-06-20 by Kevin Jamieson (http://pkp.sfu.ca/)
 	
 	function GetCommentSQL($table,$col)
 	{
@@ -520,6 +521,8 @@
 			if ($lines == null) $lines = array();
 			list(,$first) = each($lines);
 			list(,$column_def) = preg_split("/[\t ]+/",$first,2);
+		} else {
+			$column_def = '';
 		}
 		return array(sprintf($this->renameColumn,$tabname,$this->NameQuote($oldcolumn),$this->NameQuote($newcolumn),$column_def));
 	}
@@ -957,6 +960,8 @@
 			return $this->CreateTableSQL($tablename, $flds, $tableoptions);
 		}
 		
+		$tableflds = $flds;
+		/* #2343: Null / Not Null column flag changes not respected by this code.
 		if (is_array($flds)) {
 		// Cycle through the update fields, comparing
 		// existing fields to fields to update.
@@ -992,8 +997,7 @@
 				}		
 			}
 			$flds = $holdflds;
-		}
-	
+		} */
 
 		// already exists, alter table instead
 		list($lines,$pkey,$idxs) = $this->_GenFields($flds);
@@ -1001,7 +1005,10 @@
 		if ($lines == null) $lines = array();
 		$alter = 'ALTER TABLE ' . $this->TableName($tablename);
 		$sql = array();
+		$addSql = array();
+		$recreate = false;
 
+		// FIXME 2005-08-01 KJ - Warning, horrible kludge ahead for DBMSs that can't alter column types
 		foreach ( $lines as $id => $v ) {
 			if ( isset($cols[$id]) && is_object($cols[$id]) ) {
 			
@@ -1009,15 +1016,25 @@
 				
 				//  We are trying to change the size of the field, if not allowed, simply ignore the request.
 				// $flds[1] holds the type, $flds[2] holds the size -postnuke addition
+/* #2343: Null / Not Null column flag changes not respected by this code.
 				if ($flds && in_array(strtoupper(substr($flds[0][1],0,4)),$this->invalidResizeTypes4)
 				 && (isset($flds[0][2]) && is_numeric($flds[0][2]))) {
 					if ($this->debug) ADOConnection::outp(sprintf("<h3>%s cannot be changed to %s currently</h3>", $flds[0][0], $flds[0][1]));
 					#echo "<h3>$this->alterCol cannot be changed to $flds currently</h3>";
 					continue;	 
 	 			}
-				$sql[] = $alter . $this->alterCol . ' ' . $v;
+*/
+				$alter = $this->AlterColumnSQL($tablename, array($id => $tableflds[$id]));
+				if (empty($alter)) {
+					$recreate = true;
+				} else {
+					$sql[] = $alter;
+				}
 			} else {
-				$sql[] = $alter . $this->addCol . ' ' . $v;
+				$add = $this->AddColumnSQL($tablename, array($id => $tableflds[$id]));;
+				unset($tableflds[$id]);
+				$sql[] = $add;
+				$addSql[] = $add;
 			}
 		}
 		
@@ -1026,7 +1043,29 @@
 			    if ( !isset($lines[$id]) ) 
 					$sql[] = $alter . $this->dropCol . ' ' . $v->name;
 		}
+		if ($recreate) {
+			$sql = $this->AlterColumnSQL($tablename, false, $tableflds, $tableoptions);
+			$sql[] = $addSql;
+		}
 		return $sql;
 	}
+
+	// Functions for managing the database character encoding
+	// (for CREATE DATABASE, CREATE TABLE, etc.)
+	// Added 2004-06-20 by Kevin Jamieson (http://pkp.sfu.ca/)
+	function GetCharSet()
+	{
+		if (!$this->charSet) {
+			return false;
+		} else {
+			return $this->charSet;
+		}
+	}
+
+	// SetCharSet - switch the client encoding
+	function SetCharSet($charset_name)
+	{
+		$this->charSet = $charset_name;
+	}
 } // class
 ?>
\ No newline at end of file
diff -uwr adodb5/adodb.inc.php adodb/adodb.inc.php
--- adodb5/adodb.inc.php	2012-09-06 00:30:44.000000000 -0300
+++ adodb/adodb.inc.php	2012-11-07 18:33:44.000000000 -0400
@@ -413,6 +413,7 @@
 	var $arrayClass = 'ADORecordSet_array'; /// name of class used to generate array recordsets, which are pre-downloaded recordsets
 	
 	var $noNullStrings = false; /// oracle specific stuff - if true ensures that '' is converted to ' '
+	var $numQueries = 0;
 	var $numCacheHits = 0; 
 	var $numCacheMisses = 0;
 	var $pageExecuteCountRows = true;
@@ -975,6 +976,7 @@
 	 */
 	function Execute($sql,$inputarr=false) 
 	{
+		$this->numQueries++;
 		if ($this->fnExecute) {
 			$fn = $this->fnExecute;
 			$ret = $fn($this,$sql,$inputarr);
diff -uwr adodb5/datadict/datadict-mysql.inc.php adodb/datadict/datadict-mysql.inc.php
--- adodb5/datadict/datadict-mysql.inc.php	2012-09-03 03:18:42.000000000 -0300
+++ adodb/datadict/datadict-mysql.inc.php	2012-11-08 10:48:47.000000000 -0400
@@ -178,5 +178,57 @@
 		
 		return $sql;
 	}
+
+	// Character encoding support for CREATE DATABASE / CREATE TABLE
+	// Added 2004-06-20 by Kevin Jamieson (http://pkp.sfu.ca/)
+	// NOTE: If a character set is specified, assumes the database server supports this
+	function CreateDatabase($dbname,$options=false)
+	{
+		$options = $this->_Options($options);
+		$sql = array();
+
+		$s = 'CREATE DATABASE ' . $this->NameQuote($dbname);
+		if (isset($options[$this->upperName]))
+			$s .= ' '.$options[$this->upperName];
+		if ($this->charSet)
+			$s .= sprintf(' DEFAULT CHARACTER SET %s', $this->charSet);
+		$sql[] = $s;
+		return $sql;
+	}
+
+	function _TableSQL($tabname,$lines,$pkey,$tableoptions)
+	{
+		$sql = array();
+
+		if (isset($tableoptions['REPLACE']) || isset ($tableoptions['DROP'])) {
+			$sql[] = sprintf($this->dropTable,$tabname);
+			if ($this->autoIncrement) {
+				$sInc = $this->_DropAutoIncrement($tabname);
+				if ($sInc) $sql[] = $sInc;
+			}
+			if ( isset ($tableoptions['DROP']) ) {
+				return $sql;
+			}
+		}
+		$s = "CREATE TABLE $tabname (\n";
+		$s .= implode(",\n", $lines);
+		if (sizeof($pkey)>0) {
+			$s .= ",\n                 PRIMARY KEY (";
+			$s .= implode(", ",$pkey).")";
+		}
+		if (isset($tableoptions['CONSTRAINTS']))
+			$s .= "\n".$tableoptions['CONSTRAINTS'];
+
+		if (isset($tableoptions[$this->upperName.'_CONSTRAINTS']))
+			$s .= "\n".$tableoptions[$this->upperName.'_CONSTRAINTS'];
+
+		$s .= "\n)";
+		if (isset($tableoptions[$this->upperName])) $s .= $tableoptions[$this->upperName];
+		if ($this->charSet)
+			$s .= sprintf(' DEFAULT CHARACTER SET %s', $this->charSet);
+		$sql[] = $s;
+
+		return $sql;
+	}
 }
 ?>
\ No newline at end of file
diff -uwr adodb5/datadict/datadict-postgres.inc.php adodb/datadict/datadict-postgres.inc.php
--- adodb5/datadict/datadict-postgres.inc.php	2012-09-03 03:18:42.000000000 -0300
+++ adodb/datadict/datadict-postgres.inc.php	2012-11-08 10:07:51.000000000 -0400
@@ -146,6 +146,11 @@
 				$sql[] = $alter . $v;
 			}
 			if ($not_null) {
+				if (isset($default)) {
+					//$defaultv = preg_split('/[\t ]+/', $default, 2);
+					//if (!isset($defaultv[1])) $defaultv = array(null, '');
+					$sql[] = 'UPDATE '.$tabname.' SET '.$colname.' = '.$this->connection->quote($default).' WHERE '.$colname.' IS NULL';
+				}
 				list($colname) = explode(' ',$v);
 				$sql[] = 'ALTER TABLE '.$tabname.' ALTER COLUMN '.$colname.' SET NOT NULL';
 			}
@@ -298,37 +303,45 @@
 	{
 		if ($dropflds && !is_array($dropflds)) $dropflds = explode(',',$dropflds);
 		$copyflds = array();
+		$insertflds = array();
 		foreach($this->MetaColumns($tabname) as $fld) {
-			if (!$dropflds || !in_array($fld->name,$dropflds)) {
+			if ((!$dropflds || !in_array($fld->name,$dropflds)) && isset($tableflds[strtoupper($fld->name)])) {
 				// we need to explicit convert varchar to a number to be able to do an AlterColumn of a char column to a nummeric one
-				if (preg_match('/'.$fld->name.' (I|I2|I4|I8|N|F)/i',$tableflds,$matches) && 
+				if (((is_array($tableflds)
+					&& in_array($tableflds[strtoupper($fld->name)]['TYPE'], array('I', 'I2', 'I4', 'I8', 'N', 'F')))
+					|| (!is_array($tableflds)
+					&& preg_match('/'.$fld->name.' (I|I2|I4|I8|N|F)/i',$tableflds,$matches))) &&
 					in_array($fld->type,array('varchar','char','text','bytea'))) {
 					$copyflds[] = "to_number($fld->name,'S9999999999999D99')";
 				} else {
 					$copyflds[] = $fld->name;
 				}
+				$insertflds[] = $fld->name;
 				// identify the sequence name and the fld its on
-				if ($fld->primary_key && $fld->has_default && 
-					preg_match("/nextval\('([^']+)'::text\)/",$fld->default_value,$matches)) {
+				if (isset($fld->primary_key) && $fld->primary_key && $fld->has_default &&
+					preg_match("/nextval\('(?:[^']+\.)*([^']+)'::(text|regclass)\)/",$fld->default_value,$matches)) {
 					$seq_name = $matches[1];
 					$seq_fld = $fld->name;
 				}
 			}
 		}
 		$copyflds = implode(', ',$copyflds);
+		$insertflds = implode(', ',$insertflds);
 		
 		$tempname = $tabname.'_tmp';
 		$aSql[] = 'BEGIN';		// we use a transaction, to make sure not to loose the content of the table
 		$aSql[] = "SELECT * INTO TEMPORARY TABLE $tempname FROM $tabname";
 		$aSql = array_merge($aSql,$this->DropTableSQL($tabname));
 		$aSql = array_merge($aSql,$this->CreateTableSQL($tabname,$tableflds,$tableoptions));
-		$aSql[] = "INSERT INTO $tabname SELECT $copyflds FROM $tempname";
-		if ($seq_name && $seq_fld) {	// if we have a sequence we need to set it again
-			$seq_name = $tabname.'_'.$seq_fld.'_seq';	// has to be the name of the new implicit sequence
+		$aSql[] = "INSERT INTO $tabname ($insertflds) SELECT $copyflds FROM $tempname";
+		if (isset($seq_name) && $seq_name && $seq_fld) {	// if we have a sequence we need to set it again
+			// $seq_name = $tabname.'_'.$seq_fld.'_seq';	// has to be the name of the new implicit sequence
+			$seq_name = $this->makeObjectName($tabname, $seq_fld, 'seq');
 			$aSql[] = "SELECT setval('$seq_name',MAX($seq_fld)) FROM $tabname";
 		}
 		$aSql[] = "DROP TABLE $tempname";
 		// recreate the indexes, if they not contain one of the droped columns
+		/* FIXME 2005-08-01 KJ - Temporarily disabled for XML schema upgrades
 		foreach($this->MetaIndexes($tabname) as $idx_name => $idx_data)
 		{
 			if (substr($idx_name,-5) != '_pkey' && (!$dropflds || !count(array_intersect($dropflds,$idx_data['columns'])))) {
@@ -336,10 +349,87 @@
 					$idx_data['unique'] ? array('UNIQUE') : False));
 			}
 		}
+		*/
 		$aSql[] = 'COMMIT';
 		return $aSql;
 	}
 	
+	/* --- Added by Alec 2005-09-14:
+	 In PostgreSQL <7.3, SERIAL columns can't be used because they
+	impose UNIQUE constraints on the column. In the best case (when
+			we want a UNIQUE constraint), this means that the index is
+	created twice -- once by ADODB, once by PostgreSQL -- and in
+	the worst case, an unwanted UNIQUE condition is imposed.
+
+	The makeObjectName function was ported from PostgreSQL 7.1's
+	analyse.c.
+	--- */
+
+	function makeObjectName($name1, $name2, $typename) {
+		$overhead = 0;
+
+		$name1chars = strlen($name1);
+		if ($name2) {
+			$name2chars = strlen($name2);
+			$overhead++; /* allow for separating underscore */
+		}
+		else $name2chars = 0;
+
+		if ($typename) $overhead += strlen($typename) + 1;
+
+		$availchars = 64 - 1 - $overhead; /* --- 32 = default NAMEDATALEN in PostgreSQL --- */
+
+		/*
+		 * If we must truncate, preferentially truncate the longer name. This
+		* logic could be expressed without a loop, but it's simple and
+		* obvious as a loop.
+		*/
+		while ($name1chars + $name2chars > $availchars) {
+			if ($name1chars > $name2chars) $name1chars--;
+			else $name2chars--;
+		}
+
+		/* Now construct the string using the chosen lengths */
+		$name = substr($name1, 0, $name1chars);
+
+		if ($name2) $name .= '_' . substr($name2, 0, $name2chars);
+		if ($typename) $name .= '_' . $typename;
+
+		return $name;
+	}
+
+	function CreateTableSQL($tabname, $flds, $tableoptions=false) {
+		$sql = ADODB_DataDict::CreateTableSQL($tabname, $flds, $tableoptions);
+
+		if (7.3 > (float) @$this->serverInfo['version']) {
+			foreach ($flds as $fld) {
+				$fld = _array_change_key_case($fld);
+
+				$isAutoInc = false;
+				foreach($fld as $attr => $v) switch ($attr) {
+					case 'AUTOINCREMENT':
+					case 'AUTO':
+						$isAutoInc = true;
+						break;
+					case 'NAME':
+						$fname = $v;
+						break;
+				}
+
+				if (isset($fname) && $isAutoInc) {
+					// This field is an AUTOINCREMENT. Create a sequence
+					// for it.
+					$sequenceName = $this->makeObjectName($tabname, $fname, 'seq');
+					array_unshift($sql, "CREATE SEQUENCE $sequenceName");
+					array_push($sql, "ALTER TABLE $tabname ALTER COLUMN $fname SET DEFAULT nextval('$sequenceName')");
+				}
+			}
+		}
+		return $sql;
+	}
+
+	/* --- End additions by Alec --- */
+
 	function DropTableSQL($tabname)
 	{
 		$sql = ADODB_DataDict::DropTableSQL($tabname);
@@ -354,6 +444,19 @@
 	function _CreateSuffix($fname, &$ftype, $fnotnull,$fdefault,$fautoinc,$fconstraint,$funsigned)
 	{
 		if ($fautoinc) {
+			// Added by Alec 2005-09-14: With PostgreSQL < 7.3, we cannot
+			// use the SERIAL type because it forces the use of a unique
+			// index on that column; at best, this causes duplicate indexes
+			// to be created. At worst, it causes UNIQUE constraints to be
+			// put on columns that shouldn't have them.
+
+			if (7.3 > (float) @$this->serverInfo['version']) {
+				$ftype = 'INTEGER';
+				return '';
+			}
+
+			// ---
+
 			$ftype = 'SERIAL';
 			return '';
 		}
@@ -369,9 +472,16 @@
 	// this is still necessary if postgres < 7.3 or the SERIAL was created on an earlier version!!!
 	function _DropAutoIncrement($tabname)
 	{
-		$tabname = $this->connection->quote('%'.$tabname.'%');
+		// FIXME This Code
+		$seq = false;
+		foreach($this->MetaColumns($tabname) as $fld) {
+			if (isset($fld->primary_key) && $fld->primary_key && $fld->has_default &&
+				preg_match("/nextval\('[\"]?(?:[^'\"]+\.)*([^'\"]+)[\"]?'::text\)/",$fld->default_value,$matches)) {
+				$seq = $matches[1];
+			}
+		}
 
-		$seq = $this->connection->GetOne("SELECT relname FROM pg_class WHERE NOT relname ~ 'pg_.*' AND relname LIKE $tabname AND relkind='S'");
+		//$seq = $this->connection->GetOne("SELECT relname FROM pg_class WHERE NOT relname ~ 'pg_.*' AND relname LIKE $tabname AND relkind='S'");
 
 		// check if a tables depends on the sequenz and it therefor cant and dont need to be droped separatly
 		if (!$seq || $this->connection->GetOne("SELECT relname FROM pg_class JOIN pg_depend ON pg_class.relfilenode=pg_depend.objid WHERE relname='$seq' AND relkind='S' AND deptype='i'")) {
@@ -468,5 +578,25 @@
 		}
 		return $ftype;
 	}
+
+	// Functions for managing the database character encoding
+	// (for CREATE DATABASE, CREATE TABLE, etc.)
+	// Added 2004-06-20 by Kevin Jamieson (http://pkp.sfu.ca/)
+	// NOTE: If a character set is specified, assumes the database server supports this
+	function CreateDatabase($dbname,$options=false)
+	{
+		$options = $this->_Options($options);
+		$sql = array();
+
+		$s = 'CREATE DATABASE ' . $this->NameQuote($dbname);
+		if (isset($options[$this->upperName]))
+			$s .= ' '.$options[$this->upperName];
+		if ($this->charSet)
+			$s .= sprintf(' WITH ENCODING \'%s\'', $this->charSet);
+		if (7.3 <= (float) @$this->serverInfo['version'])
+			$s .= ' TEMPLATE template0'; // Deal with "template1 is being accessed by other users" errors (FIXME?)
+		$sql[] = $s;
+		return $sql;
+	}
 }
 ?>
\ No newline at end of file
diff -uwr adodb5/drivers/adodb-mysql.inc.php adodb/drivers/adodb-mysql.inc.php
--- adodb5/drivers/adodb-mysql.inc.php	2012-09-03 03:18:49.000000000 -0300
+++ adodb/drivers/adodb-mysql.inc.php	2012-11-08 10:10:29.000000000 -0400
@@ -46,6 +46,20 @@
 		if (defined('ADODB_EXTENSION')) $this->rsPrefix .= 'ext_';
 	}
 
+	// Functions for managing the client encoding
+	// Added 2004-06-20 by Kevin Jamieson (http://pkp.sfu.ca/)
+	function GetCharSet()
+	{
+		if (function_exists('mysql_client_encoding')) {
+			$this->charSet = @mysql_client_encoding($this->_connectionID);
+		}
+
+		if (!$this->charSet) {
+			return false;
+		} else {
+			return $this->charSet;
+		}
+	}
 
   // SetCharSet - switch the client encoding
   function SetCharSet($charset_name)
diff -uwr adodb5/drivers/adodb-postgres64.inc.php adodb/drivers/adodb-postgres64.inc.php
--- adodb5/drivers/adodb-postgres64.inc.php	2012-09-03 03:18:49.000000000 -0300
+++ adodb/drivers/adodb-postgres64.inc.php	2012-11-08 10:29:05.000000000 -0400
@@ -91,8 +91,8 @@
 	var $hasAffectedRows = true;
 	var $hasLimit = false;	// set to true for pgsql 7 only. support pgsql/mysql SELECT * FROM TABLE LIMIT 10
 	// below suggested by Freek Dijkstra 
-	var $true = 'TRUE';		// string that represents TRUE for a database
-	var $false = 'FALSE';		// string that represents FALSE for a database
+	var $true = '1';		// string that represents TRUE for a database
+	var $false = '0';		// string that represents FALSE for a database
 	var $fmtDate = "'Y-m-d'";	// used by DBDate() as the default date format used by the database
 	var $fmtTimeStamp = "'Y-m-d H:i:s'"; // used by DBTimeStamp as the default timestamp fmt.
 	var $hasMoveFirst = true;
@@ -163,6 +163,22 @@
 		return empty($table) || empty($column) ? $oid : $this->GetOne("SELECT $column FROM $table WHERE oid=".(int)$oid);
 	}
 
+	// Added 2004-06-27 by Kevin Jamieson (http://pkp.sfu.ca/)
+	// Insert_ID function that returns the actual field value instead of the OID
+	function PO_Insert_ID($table="", $id="") {
+		if (!empty($table) && !empty($id)) {
+			$result = @pg_exec("SELECT CURRVAL('{$table}_{$id}_seq')");
+			if ($result) {
+				$row = @pg_fetch_row($result, 0);
+				if (isset($row[0])) {
+					return $row[0];
+				}
+			}
+		}
+
+		return $this->_insertid($table, $id);
+	}
+
 // I get this error with PHP before 4.0.6 - jlim
 // Warning: This compilation does not support pg_cmdtuples() in adodb-postgres.inc.php on line 44
    function _affectedrows()
@@ -541,6 +557,9 @@
 			$fld->name = $rs->fields[0];
 			$fld->type = $rs->fields[1];
 			$fld->max_length = $rs->fields[2];
+			$fld->primary_key = false;
+			$fld->auto_increment = false;
+			$fld->scale = null;
 			$fld->attnum = $rs->fields[6];
 			
 			if ($fld->max_length <= 0) $fld->max_length = $rs->fields[3]-4;
diff -uwr adodb5/drivers/adodb-postgres7.inc.php adodb/drivers/adodb-postgres7.inc.php
--- adodb5/drivers/adodb-postgres7.inc.php	2012-09-03 03:18:49.000000000 -0300
+++ adodb/drivers/adodb-postgres7.inc.php	2012-11-08 10:31:26.000000000 -0400
@@ -208,10 +208,18 @@
 			$sql = '';
 			$i = 1;
 			$last = sizeof($sqlarr)-1;
-			foreach($sqlarr as $v) {
+			$localedata = localeconv();
+			foreach($sqlarr as $k => $v) {
 				if ($last < $i) $sql .= $v;
 				else $sql .= $v.' $'.$i;
 				$i++;
+				// pg_query_params may incorrectly format
+				// doubles using localized number formats, i.e.
+				// , instead of . for floats, violating the
+				// SQL standard. Format it locally.
+				if (gettype($inputarr[$k]) == 'double') {
+					$inputarr[$k] = str_replace($localedata['decimal_point'], '.', $inputarr[$k]);
+				}
 			}
 			
 			$rez = pg_query_params($this->_connectionID,$sql, $inputarr);
diff -uwr adodb5/perf/perf-mysql.inc.php adodb/perf/perf-mysql.inc.php
--- adodb5/perf/perf-mysql.inc.php	2012-09-03 03:18:44.000000000 -0300
+++ adodb/perf/perf-mysql.inc.php	2012-11-08 10:32:50.000000000 -0400
@@ -269,7 +269,6 @@
 			if (isset($_SESSION['INNODB_HIT_PCT'])) return $_SESSION['INNODB_HIT_PCT'];
 			return 0;
 		}
-		return 0;
 	}
 	
 	function GetKeyHitRatio()
